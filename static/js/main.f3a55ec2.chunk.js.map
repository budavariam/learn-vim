{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["preparedData","data","map","elem","q","question","replace","fuse","Fuse","includeScore","shouldSort","threshold","keys","App","useState","search","setsearch","result","console","log","line","item","score","fuzzy","className","class","id","placeholder","onChange","e","value","target","length","category","solution","ReactHtmlParser","Math","round","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8qvBA2BMA,EAA2BC,EANnBC,KAAI,SAAAC,GACd,IAAMC,EAAID,EAAKE,SAASC,QAAQ,SAAtB,qCACV,OAAO,2BAAKH,GAAZ,IAAkBE,SAAUD,OAK1BG,EAAO,IAAIC,IAAKR,EArBN,CACdS,cAAc,EACdC,YAAY,EACZC,UAAW,GACXC,KAAM,CAAC,WAAY,WAAY,aAkElBC,MA/Cf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAEPC,EAAoB,KAAXF,EAAgBf,EAlBnB,SAACe,GACb,IAAME,EAASV,EAAKQ,OAAOA,GAE3B,OADAG,QAAQC,IAAIF,GACLA,EAAOf,KAAI,SAAAkB,GAAI,kCAAUA,EAAKC,MAAf,IAAqBC,MAAOF,EAAKE,WAeTC,CAAMR,GAGpD,OAFAG,QAAQC,IAAIF,GAGV,qBAAKO,UAAU,MAAf,SACE,sBAAKC,MAAM,UAAX,UACE,qBAAKD,UAAU,gBAAf,SACE,uBACEE,GAAG,aACHC,YAAY,+BACZC,SAAU,SAACC,GACT,IAAMC,EAAQD,EAAEE,OAAOD,MAEvBd,EAAUc,IACTA,MAAOf,MAEd,kCACE,+BACE,oBAAIS,UAAU,QAAd,mBACA,oBAAIA,UAAU,WAAd,wBACA,oBAAIA,UAAU,WAAd,sBACA,oBAAIA,UAAW,SAAYP,EAAOe,SAAWf,EAAO,GAAGK,MAAS,UAAY,IAA5E,sBAIDL,EAAOf,KAAI,YAAkD,IAA/C+B,EAA8C,EAA9CA,SAAU5B,EAAoC,EAApCA,SAAU6B,EAA0B,EAA1BA,SAA0B,IAAhBZ,aAAgB,MAAR,EAAQ,EAC3D,OACE,+BACE,oBAAIE,UAAU,QAAd,SACGU,EAAShC,KAAI,SAAA2B,GAAC,OAAI,uBAAML,UAAU,WAAhB,UAA4BK,EAAE,gCAEnD,oBAAIL,UAAU,WAAd,SAA0BW,IAAgB9B,KAC1C,oBAAImB,UAAU,WAAd,SAA0BS,IAC1B,qBAAIT,UAAW,SAAYF,EAAoB,GAAZ,WAAnC,UACGA,GAASc,KAAKC,MAA+B,KAAxB,EAAIf,GAAOgB,QAAQ,IAD3C,sBCrDDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3a55ec2.chunk.js","sourcesContent":["import data from './data.json'\nimport { useState } from 'react'\nimport Fuse from 'fuse.js'\nimport ReactHtmlParser from 'react-html-parser'\nimport './App.css'\n\n\nconst options = {\n  includeScore: true,\n  shouldSort: true,\n  threshold: 0.6,\n  keys: ['category', 'question', 'answers']\n}\n\nconst fuzzy = (search) => {\n  const result = fuse.search(search)\n  console.log(result)\n  return result.map(line => ({ ...line.item, score: line.score }))\n}\n\nconst prepareData = (data) => {\n  return data.map(elem => {\n    const q = elem.question.replace(/`(.*)`/, `<span class=\"reference\">$1</span>`)\n    return { ...elem, question: q }\n  })\n}\n\nconst preparedData = prepareData(data)\nconst fuse = new Fuse(preparedData, options)\n\nfunction App() {\n  const [search, setsearch] = useState(\"\")\n  const result = search === \"\" ? preparedData : fuzzy(search)\n  console.log(result)\n\n  return (\n    <div className=\"App\">\n      <div class=\"wrapper\">\n        <div className=\"searchWrapper\">\n          <input\n            id=\"search-box\"\n            placeholder=\"Type Fuzzy Filter Query here\"\n            onChange={(e) => {\n              const value = e.target.value\n              // console.log(\"text\", value)\n              setsearch(value)\n            }} value={search} />\n        </div>\n        <table>\n          <tr>\n            <th className=\"combo\">Combo</th>\n            <th className=\"question\">Decription</th>\n            <th className=\"category\">Category</th>\n            <th className={\"score\" + ((result.length && !result[0].score) ? \" hidden\" : \"\")}>\n              Score\n            </th>\n          </tr>\n          {result.map(({ category, question, solution, score = 0 }) => {\n            return (\n              <tr>\n                <td className=\"combo\">\n                  {solution.map(e => <code className=\"keycombo\">{e}<wbr/></code>)}\n                  </td>\n                <td className=\"question\">{ReactHtmlParser(question)}</td>\n                <td className=\"category\">{category}</td>\n                <td className={\"score\" + (!score ? \" hidden\" : \"\")}>\n                  {score && Math.round((1 - score).toFixed(2) * 100)}%\n                </td>\n              </tr>\n            )\n          })}\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}